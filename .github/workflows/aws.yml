name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: us-west-1
  ECR_REGISTRY_URI: 634441478571.dkr.ecr.us-west-1.amazonaws.com/demo-app
  ECS_SERVICE: demo_ecs_svc
  ECS_CLUSTER: demo-ecs-cluster
  ECS_TASK_DEFINITION: temp/demo_ecs_app.json
  CONTAINER_NAME: demo-ecs-app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: npm install
      - name: Build Express app
        run: npm run build
      
      - name: Login to AWS ECR
        id: login-ecr
        run: |
          echo ${{ secrets.AWS_ACCESS_KEY_ID }} | aws configure --profile ecr-user set aws_access_key_id
          echo ${{ secrets.AWS_SECRET_ACCESS_KEY }} | aws configure --profile ecr-user set aws_secret_access_key
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY_URI }}
          
      - name: Push Docker image to ECR
        run: |
          sudo docker build -t $ECR_REGISTRY_URI:latest .
          sudo docker push ${{ env.ECR_REGISTRY_URI }}:latest
        
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: $ECR_REGISTRY:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
